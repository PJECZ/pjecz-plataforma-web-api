{
    "FastAPI paths": {
        "scope": "python",
        "prefix": "fpaths",
        "body": [
            "\"\"\"",
            "${1:Modulos} v2, rutas (paths)",
            "\"\"\"",
            "from fastapi import APIRouter, Depends, HTTPException",
            "from fastapi_pagination.ext.sqlalchemy import paginate",
            "from sqlalchemy.orm import Session",
            "",
            "from lib.database import get_db",
            "from lib.fastapi_pagination import LimitOffsetPage",
            "",
            "from plataforma_web.v2.${2:plural}.crud import get_${2:plural}, get_${3:singular}",
            "from plataforma_web.v2.${2:plural}.schemas import ${4:EsquemaOut}",
            "",
            "${2:plural} = APIRouter()",
            "",
            "",
            "@${2:plural}.get(\"\", response_model=LimitOffsetPage[${4:EsquemaOut}])",
            "async def listado_${2:plural}(",
            "\tdb: Session = Depends(get_db),",
            "):",
            "\t\"\"\"Listado de ${5:Plural}\"\"\"",
            "\ttry:",
            "\t\tlistado = get_${2:plural}(db)",
            "\texcept IndexError as error:",
            "\t\traise HTTPException(status_code=404, detail=f'Not found: {str(error)}') from error",
            "\texcept ValueError as error:",
            "\t\traise HTTPException(status_code=406, detail=f'Not acceptable: {str(error)}') from error",
            "\treturn paginate(listado)",
            "",
            "",
            "@${2:plural}.get(\"/{${3:singular}_id}\", response_model=${4:EsquemaOut})",
            "async def detalle_${3:singular}(",
            "\t${3:singular}_id: int,",
            "\tdb: Session = Depends(get_db),",
            "):",
            "\t\"\"\"Detalle de un ${6:Singular} a partir de su id\"\"\"",
            "\ttry:",
            "\t\t${3:singular} = get_${3:singular}(db, ${3:singular}_id=${3:singular}_id)",
            "\texcept IndexError as error:",
            "\t\traise HTTPException(status_code=404, detail=f\"Not found: {str(error)}\") from error",
            "\texcept ValueError as error:",
            "\t\traise HTTPException(status_code=406, detail=f\"Not acceptable: {str(error)}\") from error",
            "\treturn ${4:EsquemaOut}.from_orm(${3:singular})",
            ""
        ],
        "description": "Contenido para paths.py"
    },
    "FastAPI paths datatable": {
        "scope": "python",
        "prefix": "fpaths_datatable",
        "body": [
            "from fastapi_pagination.ext.sqlalchemy import paginate",
            "from lib.fastapi_pagination_datatable import LimitOffsetPage",
            "",
            "",
            "@${1:plural}.get(\"\", response_model=LimitOffsetPage[${2:EsquemaOut}])",
            "async def datatable_${1:plural}(",
            "\tfiltro_id: int = None,",
            "\tfiltro_str: str = None,",
            "\tdb: Session = Depends(get_db),",
            "):",
            "\t\"\"\"DataTable de ${3:Plural}\"\"\"",
            "\ttry:",
            "\t\tconsulta = get_${1:plural}(",
            "\t\t\tdb,",
            "\t\t\tfiltro_id=filtro_id,",
            "\t\t\tfiltro_str=filtro_str,",
            "\t\t)",
            "\texcept IndexError as error:",
            "\t\traise HTTPException(status_code=404, detail=f'Not found: {str(error)}') from error",
            "\texcept ValueError as error:",
            "\t\traise HTTPException(status_code=406, detail=f'Not acceptable: {str(error)}') from error",
            "\treturn paginate(consulta)",
            "",
            ""
        ],
        "description": "DataTable"
    }
}
